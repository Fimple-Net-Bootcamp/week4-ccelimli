// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PetCareContext))]
    [Migration("20231223003718_TestMN2")]
    partial class TestMN2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Concretes.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<int>("PetId")
                        .HasColumnType("integer")
                        .HasColumnName("PetId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Entity.Concretes.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AgeAppropriateness")
                        .HasColumnType("smallint")
                        .HasColumnName("AgeAppropriateness");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("PetId")
                        .HasColumnType("integer")
                        .HasColumnName("PetId");

                    b.Property<bool>("SterlieFood")
                        .HasColumnType("boolean")
                        .HasColumnName("SterileFood");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Entity.Concretes.HealthStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PetId")
                        .HasColumnType("integer")
                        .HasColumnName("PetId");

                    b.Property<bool>("Sterilize")
                        .HasColumnType("boolean")
                        .HasColumnName("Sterilize");

                    b.Property<bool>("Vaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("Vaccinated");

                    b.Property<short>("Weight")
                        .HasColumnType("smallint")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("PetId")
                        .IsUnique();

                    b.ToTable("HealthStatuses");
                });

            modelBuilder.Entity("Entity.Concretes.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)")
                        .HasColumnName("Gender");

                    b.Property<short>("PetAge")
                        .HasColumnType("smallint")
                        .HasColumnName("PetAge");

                    b.Property<string>("PetBreed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PetBreed");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PetName");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("Entity.Concretes.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Entity.Concretes.TrainingMapPet", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("PetId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingsMapPets");
                });

            modelBuilder.Entity("Entity.Concretes.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity.Concretes.Activity", b =>
                {
                    b.HasOne("Entity.Concretes.Pet", "Pet")
                        .WithMany("Activities")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Entity.Concretes.Food", b =>
                {
                    b.HasOne("Entity.Concretes.Pet", "Pet")
                        .WithMany("Foods")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Entity.Concretes.HealthStatus", b =>
                {
                    b.HasOne("Entity.Concretes.Pet", "Pet")
                        .WithOne("HealthStatus")
                        .HasForeignKey("Entity.Concretes.HealthStatus", "PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Entity.Concretes.Pet", b =>
                {
                    b.HasOne("Entity.Concretes.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concretes.TrainingMapPet", b =>
                {
                    b.HasOne("Entity.Concretes.Pet", "Pet")
                        .WithMany("TrainingMapPet")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concretes.Training", "Training")
                        .WithMany("TrainingMapPet")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Entity.Concretes.Pet", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Foods");

                    b.Navigation("HealthStatus")
                        .IsRequired();

                    b.Navigation("TrainingMapPet");
                });

            modelBuilder.Entity("Entity.Concretes.Training", b =>
                {
                    b.Navigation("TrainingMapPet");
                });

            modelBuilder.Entity("Entity.Concretes.User", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
